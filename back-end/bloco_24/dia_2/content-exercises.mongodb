// PARA FIXAR
// Aplicando condições ao Join com $lookup

use("agg_example");
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);
db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
]);

// Selecione todos os clientes com as suas respectivas transações feitas;
use("agg_example");
db.clients.aggregate([{
  $lookup: {
    from:"transactions",
    let: { user_name: "$name" },
    pipeline:[
      { 
        $match: { 
          $expr: { 
            $eq: [ "$from", "$$user_name" ],
          }}}],
    as: "clients_transactions",
  }
}]);

// Selecione os quatro primeiros clientes com as suas respectivas transações recebidas ordenados pelo estado em ordem alfabética;
use("agg_example");
db.clients.aggregate([
  {
    $lookup: {
    from:"transactions",
    let: { user_name: "$name" },
    pipeline:[
      { 
        $match: { 
          $expr: { 
            $eq: [ "$to", "$$user_name" ],
          }}}],
    as: "received_transactions",
  }
  },
  { $sort: { State: 1 }},
  { $limit: 4 },
]);


// Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
use("agg_example");
db.clients.aggregate([
  {
    $match: { State: "Florida" }
  },
  {
    $lookup: {
    from:"transactions",
    let: { user_name: "$name" },
    pipeline:[
      { 
        $match: { 
          $expr: { 
            $eq: [ "$to", "$$user_name" ],
          }}}],
    as: "received_transactions_Florida",
    }
  }
]);

// Tinha colocado o match depois e lembrei do aumento de performace. 

use("storage");
db.products.insertMany([
  { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
  { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
  { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
  { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
  { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
  { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
  { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
]);

// Expressão $add
// Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.
use("storage");
db.products.aggregate([
  { 
    $project: {
      name: 1,
      custo: { $add: [ "$purchase_price", "$taxes" ]} 
    }
  }
]);

// Expressão $subtract
// Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      lucro: { $subtract: [ 
        "$sale_price",
        { $add: [ "$purchase_price", "$taxes" ]}  
      ] }
    }
  }
])

// Expressão $round
// Retorne o menor número inteiro relativo ao preço de venda de cada produto;
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      sale_price: 1,
      floor_sale_price: { $floor: "$sale_price"}
    }
  }
]);

// Retorne o maior número inteiro relativo ao lucro total sobre cada produto. Nota: Desconsiderar taxas (taxes)
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      lucro: { 
        $subtract: [ 
          "$sale_price",
          "$purchase_price" 
        ] },
      ceil_lucro: { 
        $ceil: { 
          $subtract: [ 
            "$sale_price",
            "$purchase_price" 
          ] 
        }
      }
    }
  }
])

// Expressão $abs
// Calcule o valor absoluto do lucro total de cada produto.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      lucro_absoluto: {
        $abs: { $subtract: [ 
          "$sale_price",
          { $add: [ "$purchase_price", "$taxes" ]}
        ]}
      }
    }
  }
]);


// Expressão $multiply
// Calcule qual o valor total em estoque de cada produto, considerando o preço de venda e a quantidade;
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_estoque: {
        $multiply: [
          "$sale_price",
          "$quantity"
        ]
      }
    }
  }
]);

// Calcule qual será o lucro total de cada produto caso todo o estoque seja vendido.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      lucro_total: {
        $multiply: [
          { $subtract: [ 
            "$sale_price",
            { $add: [ "$purchase_price", "$taxes" ]}
          ] },
          "$quantity"
        ]
      }
    }
  }
]);


// Expressão $divide
// Calcule qual será o preço de venda de cada produto caso haja uma promoção de 50% de desconto.

use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      novo_preco: {
        $divide: [ "$sale_price", 2 ]
      }
    }
  }
]);

// no gabarito: 
  $multiply: [{ $divide: [50, 100] }, "$sale_price"]

// Estágio $addFields
// Calcule o valor total do estoque, considerando que cada produto valha o mesmo que seu preço de venda. Lembre-se da quantidade.

use("storage");
db.products.aggregate([
  {
    $addFields: {
      valor_total_estoque: {
        $multiply: [ "$sale_price", "$quantity" ]
      }
    }
  }
]);