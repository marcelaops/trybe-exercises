// Testando 
use("erp");
db.clientes.count(); // 499

use("erp");
db.produtos.count(); // 499

use("erp");
db.vendas.count(); // 4900

// Exercício 1: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "MASCULINO" .
use("erp");
db.clientes.aggregate([{ $match: { sexo: "MASCULINO" } }]);

// Exercício 2: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 .
use("erp");
db.clientes.aggregate([ 
  { $match: { 
    $and: [
      { sexo: "FEMININO" },
      { dataNascimento: { $gt: ISODate('1995-01-01'), $lt: ISODate('2005-12-31') }}
    ]
  } } 
]);

// gabarito:
db.clientes.aggregate([
  {
    $match: {
      sexo: "FEMININO",
      dataNascimento: {
        $gte: ISODate('1995-01-01'),
        $lte: ISODate('2005-12-31')
      }
    }
  }
]);

// Exercício 3: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 , limitando a quantidade de documentos retornados em 5 .
use("erp");
db.clientes.aggregate([
  { $match: { 
    $and: [
      { sexo: "FEMININO" },
      { dataNascimento: { $gt: ISODate('1995-01-01'), $lt: ISODate('2005-12-31') }}
    ]
  } },
  { $limit: 5 } 
]);

// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.
use("erp");
db.clientes.aggregate([
  { $match: { "endereco.uf": "SC" }},
  { $group: {
    _id: "$endereco.uf",
    total: { $sum: 1 }
  } },
]);

// Exercício 5: Agrupe os clientes por sexo . Retorne o total de clientes de cada sexo no campo total .
use("erp");
db.clientes.aggregate([{ 
  $group: {
    _id: "$sexo",
    total: { $sum: 1 }
  }
}]);

// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total de clientes de cada sexo no campo total .
use("erp");
db.clientes.aggregate([{
  $group: {
    _id: { sexo: "$sexo", uf: "$endereco.uf" },
    total: { $sum: 1 }
  }
}]);

// Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos):
    {
      "estado": "SP",
      "sexo": "MASCULINO",
      "total": 100
    }


use("erp");
db.clientes.aggregate([
  { $group: {
      _id: { sexo: "$sexo", uf: "$endereco.uf" },
      total: { $sum: 1 }
  }},
  { $project: {
      _id: 0,
      "endereco.uf": "$_id.uf",
      "sexo": "$_id.sexo",
      "total": 1
  }}
]);

// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.
use("erp");
db.vendas.aggregate([
  { $match: {
      status: { $in: [ "ENTREGUE", "EM SEPARACAO"]}
  }},
  { $group: { _id: "$clienteId", total: { $sum: "$valorTotal" } }},
  { $sort: { total: -1 }},
  { $limit: 5 }
]);

// Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019 .
use("erp");
db.vendas.aggregate([
   { $match: {
     dataVenda: { $gt: ISODate('2019-01-01'), $lt: ISODate('2019-12-31')}
  }},
  { $group: { _id: "$clienteId", total: { $sum: "$valorTotal" } }},
  { $sort: { total: -1 }},
  { $limit: 10 }
]);

// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.
// Dica: O operador $count pode simplificar sua query .
use("erp");
db.vendas.aggregate([
  { 
    $group: {
      _id: "$clienteId",
      qtdDeCompras: { $sum: 1}
    }
  },
  {
    $match: { qtdDeCompras: { $gt: 5 } }
  },
  { 
    $count: "totalDeClientes"
  },
]);

// ou (do gabarito):
db.vendas.aggregate([
  {
    $group: {
      _id: "$clienteId",
      totalCompras: {
        $sum: 1
      }
    }
  },
  {
    $match: {
      totalCompras: { $gt: 5 }
    }
  },
  {
    $group: {
      _id: null,
      clientes: { $sum: 1 }
    }
  },
  { $project: { _id: 0 } }
]);

// Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020 .
use("erp");
db.vendas.aggregate([
  {
    $group: {
      _id: "$clienteId",
      qtdDeCompras: { $sum: 1}
    }
  },
  {
    $match: { 
      qtdDeCompras: { $lt: 3 },
      dataVenda: { 
        $gt: ISODate("2020-01-01"), 
        $lt: ISODate("2020-03-31") }
    }
  },
  { $count: "totalDeClientesMenos3x" }
]);

// o de cima n funcionou, só o de baixo:
use("erp");
db.vendas.aggregate([
  {
    $match: {
      dataVenda: { 
        $gt: ISODate("2020-01-01"), 
        $lt: ISODate("2020-03-31") }
    }
  },
  {
    $group: {
      _id: "$clienteId",
      qtdDeCompras: { $sum: 1}
    }
  },
  {
    $match: { 
      qtdDeCompras: { $lt: 3 }
    }
  },
  { $count: "totalDeClientesMenos3x" }
]);

// Exercício 12 : Descubra quais as três uf s que mais compraram no ano de 2020 . Retorne os documentos no seguinte formato:
    {
      "totalVendas": 10,
      "uf": "SP"
    }

use("erp");
db.vendas.aggregate([
  {
    $match: { 
      dataVenda: { 
        $gt: ISODate("2020-01-01"), 
        $lt: ISODate("2020-12-31") 
      }
    }
  },
  {
    $lookup: {
      from: "clientes",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "cliente"
    }
  },
  { $unwind: "$cliente" },
  {
    $group: {
      _id: "$cliente.endereco.uf",
      totalVendas: { $sum: 1 },
    }
  },
  { $sort: { totalVendas: -1 } },
  { $limit: 3 },
  {
    $project: {
      _id: 0,
      totalVendas: 1,
      uf: "$_id"
    }
  }
]);

// Exercício 13 : Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019 . Ordene os resultados pelo nome da uf . Retorne os documentos no seguinte formato:
  {
    "_id": "MG",
    "mediaVendas": 9407.129225352113,
    "totalVendas": 142
  }

use("erp");
db.vendas.aggregate([
  {
    $match: { 
      dataVenda: { 
        $gt: ISODate("2019-01-01"), 
        $lt: ISODate("2019-12-31") 
      }
    }
  },
  {
    $lookup: {
      from: "clientes",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "cliente"
    }
  },
  { $unwind: "$cliente" },
  {
    $group: {
      _id: "$cliente.endereco.uf",
      mediaVendas: { $avg: "$valorTotal" },
      totalVendas: { $sum: 1 },
    }
  },
  {
    $project: {
      _id: 0,
      uf: "$_id",
      mediaVendas: 1,
      totalVendas: 1
    }
  },
  { $sort: { uf: 1 }}
]);

// n estava ordenando sem colocar o project
